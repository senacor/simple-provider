name: ci

on: push

env:
  GROUP: senacor
  COMMIT_SHA: ${{ github.sha }}
  SERVICE_NAME: simple-provider
  DOCKER_NAME: ghcr.io/${{ github.repository }}
  DOCKER_REGISTRY: ghcr.io
  REPO: simple-provider

  POSTGRES_VERSION: "13.3"
jobs:
  hadolint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker file lint
        uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build + verify
        run: mvn -B verify

  integration-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Integration tests
        run: mvn integration-test

  docker:
    needs:
      - hadolint
      - test
      - integration-test
    runs-on: ubuntu-latest
    env:
      PUSH_DOCKER_IMAGE: true
    steps:
      - uses: actions/checkout@v2

      - name: Package
        run: mvn -B package -DskipTests -DskipITs

      - name: "Docker: Set up QEMU"
        uses: docker/setup-qemu-action@v1

      - name: "Docker: Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1

      - name: "Docker: Login to Container Registry"
        uses: docker/login-action@v1
        if: env.PUSH_DOCKER_IMAGE == 'true'
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.DOCKER_REGISTRY }}

      - name: "Docker: Build and push to Container Registry"
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          push: ${{ env.PUSH_DOCKER_IMAGE }}

  postman-test:
    needs:
      - docker
    name: postman test
    runs-on: ubuntu-latest
    services:
      # postgres:
      #   image: postgres:13.3
      #   ports:
      #     - 5432:5432
      test-service:
        image: ghcr.io/${{ github.repository }}:${{ github.sha }}
        ports:
          - 8080:8080
        env:
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14

      # - run: npm install newman -g
      # - run: |
      #     apt-get update
      #     apt-get install --yes --no-install-recommends postgresql-client
      # - run: psql -h postgres -U postgres -f ./postman/data.sql
      - name: Build the stack
        run: docker-compose up -d
      - run: newman run postman/postman_collection.json

  deploy:
    needs:
      - docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - uses: actions/checkout@v2

      - name: render
        run: deployment/render.sh

      - name: deploy
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.KUBERNETES_CLUSTER_NAME }} \
            --role-arn ${{ secrets.KUBERNETES_CLUSTER_DEPLOY_ROLE }}
          kubectl apply -f rendered/

  quality-gates:
    runs-on: ubuntu-latest
    env:
      SONAR_TESTS: src/test/kotlin
      SONAR_SOURCES: src/main/kotlin
      SONAR_EXCLUSIONS: "**/model/**"
      SONAR_URL: ${{ secrets.SONAR_URL }}
      SONAR_LOGIN: ${{ secrets.SONAR_TOKEN }}
      COMMIT_BRANCH: ${{ github.ref }}
      COMMIT_SHA: ${{ github.sha }}
      NODE_RELEASE: node-v13.2.0-linux-x64
    steps:
      - uses: actions/checkout@v2
      - name: sonar static analiysis
        continue-on-error: true
        run: |
          curl -sSL "https://nodejs.org/download/release/v13.2.0/${{ env.NODE_RELEASE }}.tar.gz" | tar xz
          mvn verify sonar:sonar  \
          -Dsonar.nodejs.executable=${{ env.NODE_RELEASE }}/bin/node \
          -Dsonar.host.url=${{ env.SONAR_URL }} -Dsonar.login=${{ env.SONAR_LOGIN }} \
          -Dsonar.javascript.lcov.reportPaths=target/js-coverage/lcov.info \
          -Dsonar.sources=${{ env.SONAR_SOURCES }} \
          -Dsonar.projectKey=simple-provide \
          -Dsonar.tests=${{ env.SONAR_TESTS }} \
          -Dsonar.exclusions=${{ env.SONAR_EXCLUSIONS }} \
          -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html \
          -Dsonar.dependencyCheck.xmlReportPath=target/dependency-check-report.xml \
          -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json
